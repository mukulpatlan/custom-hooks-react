{"version":3,"sources":["components/UI/Section.module.css","components/Tasks/TaskItem.module.css","components/Tasks/Tasks.module.css","components/NewTask/TaskForm.module.css","components/UI/Section.js","components/Tasks/TaskItem.js","components/Tasks/Tasks.js","hooks/use-http.js","components/NewTask/TaskForm.js","components/NewTask/NewTask.js","App.js","index.js"],"names":["module","exports","Section","props","className","classes","section","children","TaskItem","task","Tasks","taskList","items","length","map","text","id","content","error","onClick","onFetch","loading","container","useHttp","useState","isLoading","setIsLoading","setError","sendReq","useCallback","params","applyData","a","httpParams","method","body","JSON","stringify","headers","fetch","url","response","ok","Error","json","data","message","TaskForm","taskInputRef","useRef","form","onSubmit","event","preventDefault","enteredValue","current","value","trim","onEnterTask","type","ref","NewTask","sendTaskReq","createTask","taskText","taskData","createdTask","name","onAddTask","enterTaskHandler","bind","App","tasks","setTasks","fetchTasks","useEffect","taskObj","loadedTasks","taskKey","push","Fragment","prevTasks","concat","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.36d760bf.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"section\":\"Section_section__3QN43\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"task\":\"TaskItem_task__1rhm-\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Tasks_container__2nBq5\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"TaskForm_form__31W-N\"};","import classes from './Section.module.css';\n\nconst Section = (props) => {\n  return <section className={classes.section}>{props.children}</section>;\n};\n\nexport default Section;\n","import classes from './TaskItem.module.css';\n\nconst TaskItem = (props) => {\n  return <li className={classes.task}>{props.children}</li>\n};\n\nexport default TaskItem;","import Section from '../UI/Section';\nimport TaskItem from './TaskItem';\nimport classes from './Tasks.module.css';\n\nconst Tasks = (props) => {\n  let taskList = <h2>No tasks found. Start adding some!</h2>;\n\n  if (props.items.length > 0) {\n    taskList = (\n      <ul>\n        {props.items.map((task) => (\n          <TaskItem key={task.id}>{task.text}</TaskItem>\n        ))}\n      </ul>\n    );\n  }\n\n  let content = taskList;\n\n  if (props.error) {\n    content = <button onClick={props.onFetch}>Try again</button>;\n  }\n\n  if (props.loading) {\n    content = 'Loading tasks...';\n  }\n\n  return (\n    <Section>\n      <div className={classes.container}>{content}</div>\n    </Section>\n  );\n};\n\nexport default Tasks;\n","import { useCallback, useState } from \"react\"\n\nconst useHttp = () => {\n    const [isLoading, setIsLoading] = useState(false);\n    const [error, setError] = useState(null);\n\n    const sendReq = useCallback(async (params, applyData) => {\n        setIsLoading(true);\n        setError(null);\n        try {\n            const httpParams = {\n                method: params.method\n            };\n            if (params.method === 'POST') {\n                httpParams.body = JSON.stringify(params.body);\n                httpParams.headers = params.headers;\n            };\n            const response = await fetch(\n                params.url,\n                httpParams\n            );\n\n            if (!response.ok) {\n                throw new Error('Request failed!');\n            }\n\n            const data = await response.json();\n\n            applyData(data);\n        } catch (err) {\n            setError(err.message || 'Something went wrong!');\n        }\n        setIsLoading(false);\n    }, []);\n\n    return {\n        isLoading,\n        error,\n        sendReq\n    };\n};\n\nexport default useHttp;","import { useRef } from 'react';\n\nimport classes from './TaskForm.module.css';\n\nconst TaskForm = (props) => {\n  const taskInputRef = useRef();\n\n  const submitHandler = (event) => {\n    event.preventDefault();\n\n    const enteredValue = taskInputRef.current.value;\n\n    if (enteredValue.trim().length > 0) {\n      props.onEnterTask(enteredValue);\n    }\n  };\n\n  return (\n    <form className={classes.form} onSubmit={submitHandler}>\n      <input type='text' ref={taskInputRef} />\n      <button>{props.loading ? 'Sending...' : 'Add Task'}</button>\n    </form>\n  );\n};\n\nexport default TaskForm;\n","import useHttp from '../../hooks/use-http';\n\nimport Section from '../UI/Section';\nimport TaskForm from './TaskForm';\n\nconst NewTask = (props) => {\n  const { isLoading, error, sendReq: sendTaskReq } = useHttp();\n\n  const createTask = (taskText, taskData) => {\n    const generatedId = taskData.name; // firebase-specific => \"name\" contains generated id\n    const createdTask = { id: generatedId, text: taskText };\n    props.onAddTask(createdTask);\n  }\n\n  const enterTaskHandler = async (taskText) => {\n    sendTaskReq({\n      url: 'https://react-guide-9f34b.firebaseio.com//tasks.json',\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: { text: taskText }\n    }, createTask.bind(null, taskText));\n  };\n\n  return (\n    <Section>\n      <TaskForm onEnterTask={enterTaskHandler} loading={isLoading} />\n      {error && <p>{error}</p>}\n    </Section>\n  );\n};\n\nexport default NewTask;\n","import React, { useEffect, useState } from 'react';\n\nimport Tasks from './components/Tasks/Tasks';\nimport NewTask from './components/NewTask/NewTask';\nimport useHttp from './hooks/use-http';\n\nfunction App() {\n  const [tasks, setTasks] = useState([]);\n  const { isLoading, error, sendReq: fetchTasks } = useHttp();\n\n  useEffect(() => {\n    const transformTask = (taskObj) => {\n      const loadedTasks = [];\n      for (const taskKey in taskObj) {\n        loadedTasks.push({ id: taskKey, text: taskObj[taskKey].text });\n      }\n      setTasks(loadedTasks);\n    };\n    fetchTasks({\n      url: 'https://react-guide-9f34b.firebaseio.com/tasks.json',\n      method: 'GET'\n    }, transformTask);\n  }, [fetchTasks]);\n\n  const taskAddHandler = (task) => {\n    setTasks((prevTasks) => prevTasks.concat(task));\n  };\n\n  return (\n    <React.Fragment>\n      <NewTask onAddTask={taskAddHandler} />\n      <Tasks\n        items={tasks}\n        loading={isLoading}\n        error={error}\n        onFetch={fetchTasks}\n      />\n    </React.Fragment>\n  );\n}\n\nexport default App;\n","import ReactDOM from 'react-dom';\n\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}